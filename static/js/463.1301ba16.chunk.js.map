{"version":3,"file":"static/js/463.1301ba16.chunk.js","mappings":"sKACA,EAA0B,yBAA1B,EAAkE,8BAAlE,EAAyG,wBAAzG,EAA4I,0BAA5I,EAAgL,yB,mBCYhL,EATmB,SAACA,GAChB,IAAIC,EAAO,WAAaD,EAAME,GAC9B,OAAOC,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAASC,SAAA,EAC5BC,EAAAA,EAAAA,KAAA,OAAKC,IAAKR,EAAMS,UAChBN,EAAAA,EAAAA,MAACO,EAAAA,GAAO,CAACC,GAAIV,EAAKK,SAAA,CAAC,IAAEN,EAAMY,UAEnC,ECAA,EANgB,SAACZ,GAEb,OAAOO,EAAAA,EAAAA,KAAA,OAAKH,UAAWC,EAAUC,SAC5BN,EAAMa,SAEf,ECgCA,EApCgB,SAACb,GACb,IAAIc,EAAkBd,EAAMe,QACvBC,KAAI,SAAAC,GAAC,OACFV,EAAAA,EAAAA,KAACW,EAAU,CAACT,OAAQQ,EAAER,OAAQG,KAAMK,EAAEL,KAAMV,GAAIe,EAAEf,IAAK,IAE3DiB,EAAkBnB,EAAMoB,SACvBJ,KAAI,SAACK,EAAGC,GAAK,OAAKf,EAAAA,EAAAA,KAACgB,EAAO,CAAaV,QAASQ,EAAER,SAAlBS,EAA4B,IAK7DE,EAAoBC,EAAAA,YAMxB,OACItB,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAUC,SAAA,EACtBC,EAAAA,EAAAA,KAAA,OAAKH,UAAWC,EAAeC,SAC1BQ,KAELP,EAAAA,EAAAA,KAAA,OAAKH,UAAWC,EAAWC,UACvBC,EAAAA,EAAAA,KAAA,OAAAD,SAAMa,OAEVhB,EAAAA,EAAAA,MAAA,OAAAG,SAAA,EACIC,EAAAA,EAAAA,KAAA,OAAAD,UACIC,EAAAA,EAAAA,KAAA,YAAUmB,SAfJ,WAClB,IAAIC,EAAYH,EAAkBI,QAAQC,MAC1C7B,EAAM8B,qBAAqBH,EAC/B,EAYqDI,IAAKP,EAAmBK,MAAO7B,EAAMgC,oBAE9EzB,EAAAA,EAAAA,KAAA,OAAAD,UACIC,EAAAA,EAAAA,KAAA,UAAQ0B,QAtBL,WACfjC,EAAMkC,YACV,EAoB8C5B,SAAC,uBAKnD,E,8BCjBA,GAAe6B,E,QAAAA,KACXC,EAAAA,EAAAA,KAlBkB,SAACC,GACnB,MAAO,CACHtB,QAASsB,EAAMC,YAAYvB,QAC3BK,SAAUiB,EAAMC,YAAYlB,SAC5BY,eAAgBK,EAAMC,YAAYN,eAE1C,IACwB,SAACO,GACrB,MAAO,CACHT,qBAAsB,SAACH,GACnBY,GAASC,EAAAA,EAAAA,IAAkCb,GAC/C,EACAO,WAAY,WACRK,GAASE,EAAAA,EAAAA,MACb,EAER,IAGIC,EAAAA,EAFJ,CAGGC,E,4GCtBCC,EAA6B,SAACP,GAAK,MAAM,CACzCQ,OAAOR,EAAMS,KAAKD,OACrB,EACYH,EAAmB,SAACK,GAM7B,OADqCX,EAAAA,EAAAA,IAAQQ,EAARR,EAJb,SAACpC,GACjB,OAAKA,EAAM6C,QACJtC,EAAAA,EAAAA,KAACwC,GAASC,EAAAA,EAAAA,GAAA,GAAKhD,KADIO,EAAAA,EAAAA,KAAC0C,EAAAA,GAAQ,CAACtC,GAAG,UAE/C,GAGJ,C","sources":["webpack://first-app/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/Message/DialogsContainer.jsx","hoc/withAuthRedirect.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__c2e4f\",\"dialogsItems\":\"Dialogs_dialogsItems__hUIL+\",\"dialog\":\"Dialogs_dialog__1V6U8\",\"messages\":\"Dialogs_messages__XaK9d\",\"message\":\"Dialogs_message__E1AI3\"};","import React from \"react\";\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n    let path = \"dialogs/\" + props.id;\r\n    return <div className={s.dialog}>\r\n        <img src={props.avatar}/>\r\n        <NavLink to={path}> {props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport s from './../Dialogs.module.css';\r\n\r\n\r\nconst Message = (props) => {\r\n\r\n    return <div className={s.message}>\r\n        {props.message}\r\n    </div>\r\n}\r\nexport default Message;","import React from \"react\";\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\n\r\nconst Dialogs = (props) => {\r\n    let dialogsElements = props.dialogs\r\n        .map(d =>\r\n            <DialogItem avatar={d.avatar} name={d.name} id={d.id}/>);\r\n\r\n    let messagesElement = props.messages\r\n        .map((m, index) => <Message key={index} message={m.message}/>)\r\n\r\n    let onAddMessage = () => {\r\n        props.addMessage();\r\n    }\r\n    let newMessageElement = React.createRef();\r\n    let onMessageChange = () => {\r\n        let freshText = newMessageElement.current.value;\r\n        props.updateNewMessageText(freshText);\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElement}</div>\r\n            </div>\r\n            <div>\r\n                <div>\r\n                    <textarea onChange={onMessageChange} ref={newMessageElement} value={props.newMessageText}/>\r\n                </div>\r\n                <div>\r\n                    <button onClick={onAddMessage}>New Message</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Dialogs;","import React from \"react\";\r\nimport Dialogs from \"../Dialogs\";\r\nimport {addMessageActionCreator, updateNewMessageTextActionCreator} from \"../../../redux/dialogs_reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogs: state.dialogsPage.dialogs,\r\n        messages: state.dialogsPage.messages,\r\n        newMessageText: state.dialogsPage.newMessageText,\r\n    }\r\n};\r\nlet mapDispatchToPros = (dispatch) => {\r\n    return {\r\n        updateNewMessageText: (freshText) => {\r\n            dispatch(updateNewMessageTextActionCreator(freshText))\r\n        },\r\n        addMessage: () => {\r\n            dispatch(addMessageActionCreator());\r\n        },\r\n    }\r\n};\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToPros),\r\n    withAuthRedirect\r\n) (Dialogs);","import {Navigate} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth:state.auth.isAuth\r\n});\r\nexport const withAuthRedirect = (Component) => {\r\n    let RedirectComponent = (props) => {\r\n            if (!props.isAuth) return <Navigate to=\"/login\" />\r\n            return <Component {...props}/>\r\n    }\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect) (RedirectComponent)\r\n    return ConnectedAuthRedirectComponent;\r\n}"],"names":["props","path","id","_jsxs","className","s","children","_jsx","src","avatar","NavLink","to","name","message","dialogsElements","dialogs","map","d","DialogItem","messagesElement","messages","m","index","Message","newMessageElement","React","onChange","freshText","current","value","updateNewMessageText","ref","newMessageText","onClick","addMessage","compose","connect","state","dialogsPage","dispatch","updateNewMessageTextActionCreator","addMessageActionCreator","withAuthRedirect","Dialogs","mapStateToPropsForRedirect","isAuth","auth","Component","_objectSpread","Navigate"],"sourceRoot":""}